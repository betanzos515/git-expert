{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setHeroes","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","placeholder","getGif","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","getGifs","then","imgs","console","log","setTimeout","useFetchGifs","GifExpertApp","heroes","ReactDOM","render","document","getElementById"],"mappings":"yNAkCeA,EA/BK,SAAC,GAAe,IAAdC,EAAa,EAAbA,UAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SATU,SAACC,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE1BR,EAAUE,GACVC,EAAc,MAIlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,SAjBa,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,QAiBfG,YAAY,2B,sCCTbC,EAdH,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACLC,EADK,gDAC0CC,UAAUH,GADpD,+DAEQI,MAAMF,GAFd,cAELG,EAFK,gBAGUA,EAAKC,OAHf,uBAGJC,EAHI,EAGJA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAMQ,EAAIG,OAAOC,iBAAiBZ,QAR/B,kBAYJM,GAZI,4CAAH,sDCUGO,EAVK,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAExB,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCiCDO,EAhCC,SAAC,GAAe,IAAdnB,EAAa,EAAbA,UAUd,ECbwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNC,EAAQxB,GACHyB,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZG,YAAW,WACPP,EAAS,CACLf,KAAKmB,EACLN,SAAQ,MAEd,WAEZ,CAACpB,IACIqB,EDLgBS,CAAa9B,GAA7BO,EAAP,EAAOA,KAAKa,EAAZ,EAAYA,QAEZ,OACI,eAAC,WAAD,WACI,6BAAKpB,IACL,sBAAKgB,UAAU,iBAAf,UACKI,GAAW,wCAGRb,EAAKE,KAAK,SAAAC,GAAG,OAET,cAAC,EAAD,eAEQA,GADCA,EAAIC,cECtBoB,EAvBM,WACjB,MAA2B7C,mBAAS,kBAApC,mBAAO8C,EAAP,KAAc/C,EAAd,KAIMe,EAAYgC,EAClB,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAa/C,UAAWA,IACxB,uBACA,6BAMQ,cAAC,EAAD,CAASe,UAAWA,UClBxCiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a56f0d00.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport {  useState } from \"react\";\n\nconst AddCategory = ({setHeroes})=>{\n    const [inputValue, setinputValue] = useState('');\n    const handleInputValue = (e)=>{\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            // setHeroes(heroes=> [inputValue,...heroes]);\n            setHeroes(inputValue);\n            setinputValue('');\n        }\n    }\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                type='text'\n                value={inputValue}\n                onChange={handleInputValue}\n                placeholder='Busca una categoria'\n            />\n            {/* <button>Agregar</button> */}\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setHeroes: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","const getGif = async (categoria)=>{\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=M5RARNvvbU81WoqmXZu8R4cvMSJgAzjN`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map( img =>{\n        return {\n            id : img.id,\n            title: img.title,\n            url : img.images.downsized_medium.url\n        }\n    });\n    // setImages(gifs);\n    return gifs;\n}\nexport default getGif;","const GifGridItem = ({title,url}) => {   \n\n    return (\n        <div className='card animate__animated animate__backInDown '>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import { Fragment } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\n// const { Fragment,useState, useEffect } = require(\"react\")\n\nconst GifGrid = ({categoria})=>{\n\n    //creamos el estado.\n   /*  const [Images, setImages] = useState([]);\n\n    useEffect(()=>{\n        getGif(categoria)\n            .then(imgs=> setImages(imgs));\n    },[categoria]);//le indicamos al navegador que este objeto no sera actualizado/ */\n\n    const {data,loading} = useFetchGifs(categoria);\n \n    return(\n        <Fragment>\n            <h3>{categoria}</h3>\n            <div className='container-grid'>\n                {loading && <p>Loading</p>}\n                {\n                    \n                    data.map( img =>\n                    (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}//con esto estoy enviando cada una de las propiedades\n                        />\n                    )\n                    )\n                }\n            </div>\n        </Fragment>\n    );\n}\nexport default GifGrid;","import {useState, useEffect} from 'react';\nimport getGifs from '../helpers/getGifs';\n\nexport const useFetchGifs = (categoria)=>{\n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    });\n\n    useEffect(()=>{\n        getGifs(categoria)\n            .then(imgs=>{\n                console.log(imgs)\n                setTimeout(()=>{\n                    setstate({\n                        data:imgs,\n                        loading:false\n                    })\n                },1500);\n            })\n    },[categoria]);\n    return state;\n}","import {useState} from 'react';\nimport { Fragment } from \"react\";\nimport AddCategory from './AddCategory';\nimport './app.css';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = ()=>{\n    const [heroes,setHeroes] = useState('Doctor Strange');\n    /* const handlerHeroes = (search)=>{\n        setHeroes([...heroes,search]);\n    } */\n    const categoria = heroes;\n    return(\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setHeroes={setHeroes}/>\n            <hr/>\n            <ol>\n            {\n               /*  heroes.map((category) => \n                    <GifGrid key={category} categoria={category} heores={heroes}/>\n                ) */\n               \n                    <GifGrid categoria={categoria}/>\n            }\n            </ol>\n        </Fragment>\n    );\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}